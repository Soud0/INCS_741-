# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lZfv1Wvt1-VYcT14UeJ0UC3_yRQY74_J
"""

def encrypt_rail_fence_cipher(text, d):
    matrix = [['' for _ in range(len(text))] for _ in range(d)]

    row, col = 0, 0
    downward = False

    for char in text:
        if row == 0 or row == d - 1:
            downward = not downward

        matrix[row][col] = char
        col += 1

        if downward:
            row += 1
        else:
            row -= 1

    ciphertext = ''.join([''.join(row) for row in matrix])
    return ciphertext

def main():
    # Take inputs for the message and the key tuple (d, r)
    message = input("Enter the message: ").replace(" ", "").lower()
    d, r = map(int, input("Enter the key as a tuple (d,r): ").strip("()").split(","))

    # Encrypt the message 'r' times
    encrypted_message = message
    for _ in range(r):
        encrypted_message = encrypt_rail_fence_cipher(encrypted_message, d)

    print(f"Encrypted message: {encrypted_message}")

if __name__ == "__main__":
    main()

def decrypt_rail_fence_cipher(ciphertext, d):
    matrix = [['' for _ in range(len(ciphertext))] for _ in range(d)]

    # Mark the positions in the matrix where characters from the ciphertext will be placed
    row, col = 0, 0
    downward = False

    for _ in ciphertext:
        if row == 0 or row == d - 1:
            downward = not downward

        matrix[row][col] = '*'
        col += 1

        if downward:
            row += 1
        else:
            row -= 1

    # Fill the matrix with characters from the ciphertext
    idx = 0
    for r in range(d):
        for c in range(len(ciphertext)):
            if matrix[r][c] == '*' and idx < len(ciphertext):
                matrix[r][c] = ciphertext[idx]
                idx += 1

    # Extract the original message from the matrix in a zigzag pattern
    plaintext = []
    row, col = 0, 0
    downward = False

    for _ in range(len(ciphertext)):
        if row == 0 or row == d - 1:
            downward = not downward

        plaintext.append(matrix[row][col])
        col += 1

        if downward:
            row += 1
        else:
            row -= 1

    return ''.join(plaintext)

def main():
    # Take inputs for the encrypted message and the key tuple (d, r)
    encrypted_message = input("Enter the encrypted message: ").lower()
    d, r = map(int, input("Enter the key as a tuple (d,r): ").strip("()").split(","))

    # Decrypt the message 'r' times
    decrypted_message = encrypted_message
    for _ in range(r):
        decrypted_message = decrypt_rail_fence_cipher(decrypted_message, d)

    print(f"Decrypted message: {decrypted_message}")

if __name__ == "__main__":
    main()